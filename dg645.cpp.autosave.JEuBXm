#include "dg645.h"

dg645::dg645()
{
    //start();
}

int dg645::start()
{
  /* Initialize the sockets library */
    init_tcpip();

    /* Connect to the dg645 */
    if ( dg_connect( inet_addr("192.168.0.15") ) ) {
        dgSay("Connection Succeeded");
        /* Get identification string */
        dg_write("*idn?\n");
        if ( dg_read(buffer,sizeof(buffer)) )
            //sync->Say(buffer);
        //else
            //sync->Say("Timeout");
        /* Load default settings */
        //dg_write("*rst\n");
        /* Set internal triggering */
        dg_write("tsrc 0\n");
        /* Set trigger rate to 2kHz */
        dg_write("trat 10\n");
        /* Set A = 0 + 100 ns */
        dg_write("dlay 2,0,10e-9\n");
        /* Set B = A + 100 ns */
        dg_write("dlay 3,2,100e-9\n");
        /* Make sure all commands have executed before closing connection */
        dg_write("*opc?\n");
        // if ( !dg_read(buffer,sizeof(buffer)) )
            //sync->Say("Timeout");
        //if (dg_close())
            //sync->Say("Closed connection");
        //else
            //sync->Say("Unable to close connection");
    }
    else
        //sync->Say("Connection Failed");

    return 0;
   }
void dg645::init_tcpip(void)
{
   WSADATA wsadata;
   if ( WSAStartup(2, &wsadata) != 0 ) {
        //sync->Say("Unable to load windows socket library");
        exit(1);
    }
}

int dg645::dg_connect(unsigned long ip) {
    /* Connect to the DG645 */
    struct sockaddr_in intrAddr;
    int status;

  sDG645 = socket(AF_INET,SOCK_STREAM,0);
  if ( sDG645 == INVALID_SOCKET )
      return 0;

  /* Bind to a local port */
  memset(&intrAddr,0,sizeof(intrAddr));
  intrAddr.sin_family = AF_INET;
  intrAddr.sin_port = htons(0);
  intrAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);
  if ( SOCKET_ERROR == bind(sDG645,(const struct sockaddr*)&intrAddr,sizeof(intrAddr)) ) {
      closesocket(sDG645);
      sDG645 = INVALID_SOCKET;
      return 0;
  }

  /* Setup address for the connection to dg on port 5025 */
  memset(&intrAddr,0,sizeof(intrAddr));
  intrAddr.sin_family = AF_INET;
  intrAddr.sin_port = htons(5025);
  intrAddr.sin_addr.S_un.S_addr = ip;
  status = connect(sDG645,(const struct sockaddr *)&intrAddr,sizeof(intrAddr));
  if ( status ) {
      closesocket(sDG645);
      sDG645 = INVALID_SOCKET;
      return 0;
  }
  return 1;
}

int dg645::dg_close(void) {
    if ( closesocket(sDG645) != SOCKET_ERROR )
        return 1;
    else
        return 0;
}

int dg645::dg_write(const char *str) {
    /* Write string to connection */
    int result;
    result = send(sDG645,str,(int)strlen(str),0);
    if ( SOCKET_ERROR == result )
        result = 0;
    return result;
}
int dg645::dg_read(char *buffer, unsigned num) {
    /* Read up to num bytes from connection */
    int count;
    fd_set setRead, setWrite, setExcept;
    TIMEVAL tm;
    /* Use select() so we can timeout gracefully */
    tm.tv_sec = dg_timeout/1000;
    tm.tv_usec = (dg_timeout % 1000) * 1000;

  FD_ZERO(&setRead);
  FD_ZERO(&setWrite);
  FD_ZERO(&setExcept);
  FD_SET(sDG645,&setRead);
  count = select(0,&setRead,&setWrite,&setExcept,&tm);
  if ( count == SOCKET_ERROR ) {
      //sync->Say("select failed: connection aborted");
      closesocket(sDG645);
      exit(1);
  }
  count = 0;
  if ( FD_ISSET(sDG645,&setRead) ) {
      /* We've received something */
      count = (int)recv(sDG645,buffer,num-1,0);
      if ( SOCKET_ERROR == count ) {
          //sync->Say("Receive failed: connection aborted");
          closesocket(sDG645);
          exit(1);
      }
      else if (count ) {
          buffer[count] = '\0';
      }
      else {
          //sync->Say("Connection closed by remote host");
          closesocket(sDG645);
          exit(1);
      }
  }

  return count;
}
